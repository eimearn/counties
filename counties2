"""
Title: Programming for GIS Assignment 1
Author: Eimear Nicholl
Date: 25/03/2019
Programme purpose: The purpose of this programme is to read and perform tasks on the CSO 'counties' dataset
Specific tasks
1. Download and save the counties dataset as a shapefile. You can get this at
http://mf2.dit.ie:8080/geoserver/cso/ows?service=WFS&version=1.0.0&request=GetFeature&typeName=cso:ctygeom&outputFormat=SHAPE-ZIP
2.. Merge the Dublin local authorities into one and store in a new shapefile. Don't forget to store the attributes as
 well as the geometry.
3. Calculate the centroid for Dublin merged and store this in a new shapefile.
4. Geocode the address of this centroid. You will need to convert the CRS to WGS84. This should be stored in the
shapefile you created in the last step.
Suggestions
- Store downloaded files like ctygeom in their own directory/folder in your PyCharm project. Give this a sensible
name such as "counties" in this example. By using this scheme you can download it once and use it in different programs.
- Store files created such as the merged shapefile and centroid in a separate directory/folder. Name this something like
 ".cache". The leading "." indicates a hidden directory/folder. This is designed to be sacrificial. You can delete its contents without losing anything of value.
- There is an error in the Geopy library so for the geocoding part of the exercise, download and use geopy_corrected.py
 from my GitHub page. Import this into your program.

"""

import requests
import zipfile
import fiona
import shapely


#import and saving file
#code adapted from code by Lauren Oldja at https://medium.com/@loldja/reading-shapefile-zips-from-a-url-in-python-3-93ea8d727856
#import file from online

url = 'http://mf2.dit.ie:8080/geoserver/cso/ows?service=WFS&version=1.0.0&request=GetFeature&typeName=cso:ctygeom&outputFormat=SHAPE-ZIP'
path = input("Enter a shapefile name in the format of path/to/") #https://github.com/markfoleyie/gisp2019/blob/master/fiona_read_1.py

def download_shp(url): #function created to download and save shp file from url
    print('Downloading shapefile...')
    r = requests.get(url)
    z = zipfile.ZipFile(io.BytesIO(r.content))
    print("Done")
    z.extractall(path)
    # extract to folder, not included in the code because the reader of the file will not want to save the file to
    # their computer
    filenames = [y for y in sorted(z.namelist()) for ending in ['dbf', 'prj', 'shp', 'shx'] if y.endswith(ending)]
    print(filenames)
    return

#download_shp(url) #run download_shp function


#2 Merge the Dublin local authorities into one and store in a new shapefile.

#function to find local aouthorities into one shp file and merge the counties into one polygon

def merge(shp):
    if __name__ == "__main__":
        shp = "ctygeom.shp"
        features = []
        with fiona.Env():
            with fiona.open(shp, "r") as fh:
                for feature in fh:
                    if "Fingal" in feature["properties"]["countyname"]:
                        features.append(feature)
                    elif "Dublin_city" in feature["properties"]["countyname"]:
                        features.append(feature)
                    elif "South_dublin" in feature["properties"]["countyname"]:
                        features.append(feature)
                    elif "Dúnlaoghaire–rathdown" in feature["properties"]["countyname"]:
                        features.append(feature)
                    else:
                        print("does no compute")
        result = geom_info(features[0], features[1])
        print("g1 Info\n" + "-" * 20)
        for k in result[0].items():
            cascade_union(result)
    return


merge(shp)

#now save as new shp

driver = ogr.GetDriverByName('ESRI Shapefile')
try:
    ds_out = driver.CreateDataSource("ctygeom.shp")
except:
    raise Exception("File already exists.")

# Grab current layer's SRS and geometry type.
srs = layer_in.GetSpatialRef()
geom_type = layer_in.GetGeomType()

# Create empty layer.
layer_out = ds_out.CreateLayer(name = "dublin", srs = 2157, geom_type = polygon)

# Copy fields
layer_defn = results.GetLayerDefn()
n_fields = layer_defn.GetFieldCount()
for i in range(n_fields):
    layer_out.CreateField(layer_defn.GetFieldDefn(i))

#3 Find centroid of merged Dublin File

dublin.centroid.wkt

#4 













